{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "7012611e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generated melody: ['G' 'D' 'C' 'C' 'D' 'C' 'D' 'E' 'D' 'G']\n"
     ]
    }
   ],
   "source": [
    "from pomegranate import HiddenMarkovModel, State, DiscreteDistribution\n",
    "\n",
    "# Define observable notes\n",
    "notes = ['C', 'D', 'E', 'F', 'G', 'A', 'B']\n",
    "\n",
    "# Define emission probabilities (ensuring they sum to 1)\n",
    "calm_emissions = DiscreteDistribution({'C': 0.3, 'D': 0.2, 'E': 0.1, 'F': 0.1, 'G': 0.3, 'A': 0.0, 'B': 0.0})\n",
    "energetic_emissions = DiscreteDistribution({'C': 0.1, 'D': 0.1, 'E': 0.3, 'F': 0.3, 'G': 0.1, 'A': 0.1, 'B': 0.0})  # Fixed A = 0.1\n",
    "melancholic_emissions = DiscreteDistribution({'C': 0.0, 'D': 0.3, 'E': 0.1, 'F': 0.3, 'G': 0.1, 'A': 0.0, 'B': 0.2})\n",
    "\n",
    "# Define states\n",
    "calm = State(calm_emissions, name='Calm')\n",
    "energetic = State(energetic_emissions, name='Energetic')\n",
    "melancholic = State(melancholic_emissions, name='Melancholic')\n",
    "\n",
    "# Create HMM model\n",
    "hmm = HiddenMarkovModel(\"Music HMM\")\n",
    "hmm.add_states(calm, energetic, melancholic)\n",
    "\n",
    "# Define transition probabilities (how moods change over time)\n",
    "hmm.add_transition(hmm.start, calm, 0.5)\n",
    "hmm.add_transition(hmm.start, energetic, 0.3)\n",
    "hmm.add_transition(hmm.start, melancholic, 0.2)\n",
    "\n",
    "hmm.add_transition(calm, calm, 0.6)\n",
    "hmm.add_transition(calm, energetic, 0.2)\n",
    "hmm.add_transition(calm, melancholic, 0.2)\n",
    "\n",
    "hmm.add_transition(energetic, energetic, 0.5)\n",
    "hmm.add_transition(energetic, calm, 0.3)\n",
    "hmm.add_transition(energetic, melancholic, 0.2)\n",
    "\n",
    "hmm.add_transition(melancholic, melancholic, 0.6)\n",
    "hmm.add_transition(melancholic, energetic, 0.2)\n",
    "hmm.add_transition(melancholic, calm, 0.2)\n",
    "\n",
    "hmm.add_transition(calm, hmm.end, 0.1)\n",
    "hmm.add_transition(energetic, hmm.end, 0.1)\n",
    "hmm.add_transition(melancholic, hmm.end, 0.1)\n",
    "\n",
    "# Finalize the model\n",
    "hmm.bake()\n",
    "\n",
    "# Generate a sequence of notes\n",
    "sequence = hmm.sample(length=10)\n",
    "print(\"Generated melody:\", sequence)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "b2f67f1a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generated melody: ['G' 'E' 'F' 'E' 'F' 'B' 'D' 'G' 'C' 'G']\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from pomegranate import HiddenMarkovModel, State, DiscreteDistribution\n",
    "\n",
    "# Define observable notes\n",
    "notes = ['C', 'D', 'E', 'F', 'G', 'A', 'B']\n",
    "note_to_pitch = {'C': 0, 'D': 1, 'E': 2, 'F': 3, 'G': 4, 'A': 5, 'B': 6}  # Mapping notes to pitch values for plotting\n",
    "\n",
    "# Define emission probabilities (ensuring they sum to 1)\n",
    "calm_emissions = DiscreteDistribution({'C': 0.3, 'D': 0.2, 'E': 0.1, 'F': 0.1, 'G': 0.3, 'A': 0.0, 'B': 0.0})\n",
    "energetic_emissions = DiscreteDistribution({'C': 0.1, 'D': 0.1, 'E': 0.3, 'F': 0.3, 'G': 0.1, 'A': 0.1, 'B': 0.0})\n",
    "melancholic_emissions = DiscreteDistribution({'C': 0.0, 'D': 0.3, 'E': 0.1, 'F': 0.3, 'G': 0.1, 'A': 0.0, 'B': 0.2})\n",
    "\n",
    "# Define states\n",
    "calm = State(calm_emissions, name='Calm')\n",
    "energetic = State(energetic_emissions, name='Energetic')\n",
    "melancholic = State(melancholic_emissions, name='Melancholic')\n",
    "\n",
    "# Create HMM model\n",
    "hmm = HiddenMarkovModel(\"Music HMM\")\n",
    "hmm.add_states(calm, energetic, melancholic)\n",
    "\n",
    "# Define transition probabilities (how moods change over time)\n",
    "hmm.add_transition(hmm.start, calm, 0.5)\n",
    "hmm.add_transition(hmm.start, energetic, 0.3)\n",
    "hmm.add_transition(hmm.start, melancholic, 0.2)\n",
    "\n",
    "hmm.add_transition(calm, calm, 0.6)\n",
    "hmm.add_transition(calm, energetic, 0.2)\n",
    "hmm.add_transition(calm, melancholic, 0.2)\n",
    "\n",
    "hmm.add_transition(energetic, energetic, 0.5)\n",
    "hmm.add_transition(energetic, calm, 0.3)\n",
    "hmm.add_transition(energetic, melancholic, 0.2)\n",
    "\n",
    "hmm.add_transition(melancholic, melancholic, 0.6)\n",
    "hmm.add_transition(melancholic, energetic, 0.2)\n",
    "hmm.add_transition(melancholic, calm, 0.2)\n",
    "\n",
    "hmm.add_transition(calm, hmm.end, 0.1)\n",
    "hmm.add_transition(energetic, hmm.end, 0.1)\n",
    "hmm.add_transition(melancholic, hmm.end, 0.1)\n",
    "\n",
    "# Finalize the model\n",
    "hmm.bake()\n",
    "\n",
    "# Generate a sequence of notes\n",
    "sequence = hmm.sample(length=10)\n",
    "print(\"Generated melody:\", sequence)\n",
    "\n",
    "# Plot the melody\n",
    "plt.figure(figsize=(10, 4))\n",
    "note_pitches = [note_to_pitch[note] for note in sequence]\n",
    "plt.plot(range(len(sequence)), note_pitches, marker='o', linestyle='-', color='b')\n",
    "plt.yticks(range(len(notes)), notes)\n",
    "plt.xlabel(\"Time Step\")\n",
    "plt.ylabel(\"Note\")\n",
    "plt.title(\"Generated Melody on a Music Staff\")\n",
    "plt.grid(True)\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "c7a10e20",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting midiutil\n",
      "  Downloading MIDIUtil-1.2.1.tar.gz (1.0 MB)\n",
      "     ---------------------------------------- 1.0/1.0 MB 1.9 MB/s eta 0:00:00\n",
      "  Preparing metadata (setup.py): started\n",
      "  Preparing metadata (setup.py): finished with status 'done'\n",
      "Building wheels for collected packages: midiutil\n",
      "  Building wheel for midiutil (setup.py): started\n",
      "  Building wheel for midiutil (setup.py): finished with status 'done'\n",
      "  Created wheel for midiutil: filename=MIDIUtil-1.2.1-py3-none-any.whl size=55541 sha256=b0ef2e756aa3d1acb26b8a5d97570108c363647adb1806c801078c448a97fa2e\n",
      "  Stored in directory: c:\\users\\iaina\\appdata\\local\\pip\\cache\\wheels\\48\\e9\\3a\\c25491f10032c274437c88213ddd056d6b15854e6b24b801cf\n",
      "Successfully built midiutil\n",
      "Installing collected packages: midiutil\n",
      "Successfully installed midiutil-1.2.1\n",
      "Generated melody: ['C' 'E' 'G' 'F' 'F' 'C' 'F' 'F' 'F' 'F']\n",
      "MIDI file 'generated_melody.mid' saved successfully!\n"
     ]
    }
   ],
   "source": [
    "# Install the missing package\n",
    "!pip install midiutil\n",
    "\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from pomegranate import HiddenMarkovModel, State, DiscreteDistribution\n",
    "from midiutil import MIDIFile\n",
    "\n",
    "# Define observable notes\n",
    "notes = ['C', 'D', 'E', 'F', 'G', 'A', 'B']\n",
    "note_to_pitch = {'C': 60, 'D': 62, 'E': 64, 'F': 65, 'G': 67, 'A': 69, 'B': 71}  # MIDI note numbers\n",
    "\n",
    "# Define emission probabilities (ensuring they sum to 1)\n",
    "calm_emissions = DiscreteDistribution({'C': 0.3, 'D': 0.2, 'E': 0.1, 'F': 0.1, 'G': 0.3, 'A': 0.0, 'B': 0.0})\n",
    "energetic_emissions = DiscreteDistribution({'C': 0.1, 'D': 0.1, 'E': 0.3, 'F': 0.3, 'G': 0.1, 'A': 0.1, 'B': 0.0})\n",
    "melancholic_emissions = DiscreteDistribution({'C': 0.0, 'D': 0.3, 'E': 0.1, 'F': 0.3, 'G': 0.1, 'A': 0.0, 'B': 0.2})\n",
    "\n",
    "# Define states\n",
    "calm = State(calm_emissions, name='Calm')\n",
    "energetic = State(energetic_emissions, name='Energetic')\n",
    "melancholic = State(melancholic_emissions, name='Melancholic')\n",
    "\n",
    "# Create HMM model\n",
    "hmm = HiddenMarkovModel(\"Music HMM\")\n",
    "hmm.add_states(calm, energetic, melancholic)\n",
    "\n",
    "# Define transition probabilities (how moods change over time)\n",
    "hmm.add_transition(hmm.start, calm, 0.5)\n",
    "hmm.add_transition(hmm.start, energetic, 0.3)\n",
    "hmm.add_transition(hmm.start, melancholic, 0.2)\n",
    "\n",
    "hmm.add_transition(calm, calm, 0.6)\n",
    "hmm.add_transition(calm, energetic, 0.2)\n",
    "hmm.add_transition(calm, melancholic, 0.2)\n",
    "\n",
    "hmm.add_transition(energetic, energetic, 0.5)\n",
    "hmm.add_transition(energetic, calm, 0.3)\n",
    "hmm.add_transition(energetic, melancholic, 0.2)\n",
    "\n",
    "hmm.add_transition(melancholic, melancholic, 0.6)\n",
    "hmm.add_transition(melancholic, energetic, 0.2)\n",
    "hmm.add_transition(melancholic, calm, 0.2)\n",
    "\n",
    "hmm.add_transition(calm, hmm.end, 0.1)\n",
    "hmm.add_transition(energetic, hmm.end, 0.1)\n",
    "hmm.add_transition(melancholic, hmm.end, 0.1)\n",
    "\n",
    "# Finalize the model\n",
    "hmm.bake()\n",
    "\n",
    "# Generate a sequence of notes\n",
    "sequence = hmm.sample(length=10)\n",
    "print(\"Generated melody:\", sequence)\n",
    "\n",
    "# Save melody as MIDI file\n",
    "midi = MIDIFile(1)  # Single track\n",
    "midi.addTempo(0, 0, 120)  # Track 0, time 0, tempo 120 BPM\n",
    "\n",
    "for i, note in enumerate(sequence):\n",
    "    midi.addNote(0, 0, note_to_pitch[note], i, 1, 100)  # Channel 0, Track 0, Velocity 100\n",
    "\n",
    "with open(\"generated_melody.mid\", \"wb\") as output_file:\n",
    "    midi.writeFile(output_file)\n",
    "\n",
    "print(\"MIDI file 'generated_melody.mid' saved successfully!\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "ae15069d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Iaina\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "print(os.getcwd())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8b45b250",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python (newpomegranate)",
   "language": "python",
   "name": "newpomegranate"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
